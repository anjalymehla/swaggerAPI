# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: CMTS API
  description: B2B Meeting Scheduling System
  version: "1.0.0"
# the domain of the service
#host: api.uber.com
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json
paths:
  /Sign_Up:
    get:
      summary: users sign up a new account  
      description: |
        This fucntions is used for new users to create account, in the first vertion, we just need their email, password, and role. Roles could be company representative, employees, or administrator.
        We need the user's first name and last name in there acount profile, and their company's name to group them by their company.
        In the following versions we will make requirement of the password.
      parameters:
        - name: email
          in: query
          description: Email address of the user.
          required: true
          type: string
          format: string
          
        - name: password
          in: query
          description: password of the user's account 
          required: true
          type: string  
          format: string
          
        - name: role
          in: query
          description: role of the user
          required: true
          type: string  
          format: string
          
        - name: first_name
          in: query
          description: first name of the user.
          required: true
          type: string
          format: string
        - name: last_name
          in: query
          description: last name of the user. 
          required: true
          type: string  
          format: string
        - name: company_name
          in: query
          description: user's company's name
          required: true
          type: string  
          format: string
      tags:
        - user
      responses:
        200:
          description: Authentication Token
          schema:
            type: string
            items:
              $ref: '#/definitions/Profile'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  
  /login:
    get:
      summary: User Login
      description: |
       The endpoint takes user email and passwod and returns authentication token for given user credentials if it exists in the database. The auth token is encrypted with user-id information and user-role for authorization purposes.
      parameters:
        - name: username
          in: formData
          description: User email.
          required: true
          type: string
        - name: password
          in: formData
          description: User password.
          required: true
          type: string
      tags:
        - Login
      responses:
        200:
          description: Auth Token
          schema:
            $ref: '#/definitions/LoginToken'
        401:
          description: Invalid username/password.
          schema:
            $ref: '#/definitions/Error'
 
  /forgotPassword:
    get:
      summary: Forgot Password
      description: The api endpoint sends an email to user email id containing link to reset password page or security code if there is a user entry in database.Once user has successfully changed password, return authentication token.
      parameters:
        - name: username
          in: formData
          description: User email.
          required: true
          type: string
      tags:
        - Login
      responses:
        200:
          description: Auth Token
          schema:
            $ref: '#/definitions/LoginToken'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /user/profile:
    get:
      summary: Get user profile
      description: |
        The Profile endpoint returns information of the user if the user is authorized by the system.
      parameters:
        - name: user_id
          in: query
          description: Unique identifier of user.
          required: true
          type: number
          format: int
      tags:
        - User
      responses:
        200:
          description: Profile information for a user
          schema:
            $ref: '#/definitions/Profile'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  
  /user/update:
    get:
      summary: Update user information
      description: |
        The Update endpoint returns the result of user's attemp to add, delete or modify their information.
      parameters:
        - name: user_id
          in: query
          description: Unique identifier of user
          required: true
          type: number
          format: int
        - name: user_profile
          in: query
          description: Information modefied by user
          required: true
          type: object
          schema:
            $ref: '#/definitions/Profile'
      tags:
        - User
      responses:
        200:
          description: Update successfully
          
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
 
definitions:
  LoginToken:
    type: string
    properties:
      authToken:
        type: string
        description: Encrypted Token containing user information
 
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  
  User_Profile:
    type: object
    properties:
      first_name:
        type: string
        description: First name of the user.
      last_name:
        type: string
        description: Last name of the user.
      email:
        type: string
        description: Email address of the user
      password:
        type: string
        description: password URL of the  user.
      role:
        type: string
        description: role of the user's account
      company:
        type: string
        description: company of the user
      Authentication Token:
        type: string
        description: Authentication Token of the user.


  Profile:
    type: object
    properties:
      company_name:
        type: string
        description: Company name of the user
      mission_statement:
        type: string
        description: Mission statement of the user.
      purpose:
        type: string
        description: Purpose ot the user indicating why they are here.
      type_of_work:
        type: string
        description: Type of the user, such as entrepreneur, investor, lawyer, company, researcher, student, etc.
      employee:
        description: Employees who will attend the conference. Can be null.
        type: array
        items:
          $ref: '#/definitions/Employee'
      project:
        description: Projects of the company. Can be null.
        type: array
        items:
          $ref: '#/definitions/Project'
      business_keyword:
        type: string
        description: one or more keywords of the company. Can be null.
  
  Project:
    type: object
    properties:
      name:
        type: string
        description: Name of the project.
      description:
        type: string
        description: Brief description of the project.
  
  Employee:
    type: object
    properties:
      name:
        type: string
        description: Name of the employee
      email:
        type: string
        description: Email of the employee
